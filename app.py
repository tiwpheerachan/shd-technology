import streamlit as st
import pandas as pd
import json
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders
import time
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
import os
from web_scraping import scrape_led_data
from fpdf import FPDF

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
FONT_PATH = "NotoSansThai-Regular.ttf"

if not os.path.exists(FONT_PATH):
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå NotoSansThai-Regular.ttf ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
else:
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    pdf = FPDF()
    pdf.add_page()
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Unicode
    pdf.add_font("NotoSansThai", "", FONT_PATH, uni=True)
    pdf.set_font("NotoSansThai", size=14)
    
    # ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ
    pdf.cell(200, 10, txt="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ", ln=True)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    output_path = "thai_report.pdf"
    pdf.output(output_path)

    # ‚úÖ Streamlit ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    with open(output_path, "rb") as f:
        st.download_button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", f, file_name=output_path)
        
# Main application
def main():
    # Page configuration
    st.set_page_config(
        page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ",
        layout="wide",
        initial_sidebar_state="expanded",
        page_icon=None
    )

    # Custom CSS - Google Style
    st.markdown("""
    <style>
        /* Google Style Theme */
        :root {
            --primary-color: #1a73e8;
            --primary-light: #e8f0fe;
            --secondary-color: #5f6368;
            --background-color: #ffffff;
            --surface-color: #f8f9fa;
            --border-color: #dadce0;
            --text-color: #202124;
            --text-secondary: #5f6368;
            --success-color: #188038;
            --warning-color: #f29900;
            --error-color: #d93025;
        }
        
        /* Typography */
        h1, h2, h3, h4, h5, h6 {
            color: var(--text-color);
            font-weight: 400;
        }
        
        p, div {
            color: var(--text-color);
            font-weight: 400;
        }
        
        /* Main Header */
        .main-header {
            padding: 1.5rem 0;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 2rem;
        }
        
        .main-header h1 {
            font-size: 1.8rem;
            font-weight: 400;
            color: var(--text-color);
            margin: 0;
        }
        
        .main-header p {
            font-size: 1rem;
            color: var(--text-secondary);
            margin-top: 0.5rem;
        }
        
        /* Section Headers */
        .section-header {
            font-size: 1.2rem;
            font-weight: 500;
            color: var(--text-color);
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border-color);
        }
        
        /* Cards */
        .card {
            background-color: var(--background-color);
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
            margin-bottom: 1rem;
            height: 100%;
        }
        
        /* Metric Cards */
        .metric-card {
            background-color: var(--background-color);
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
            text-align: center;
            height: 100%;
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: 400;
            color: var(--primary-color);
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-top: 0.5rem;
        }
        
        /* Filter Section */
        .filter-section {
            background-color: var(--surface-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border-color);
        }
        
        .filter-header {
            font-size: 1rem;
            font-weight: 500;
            color: var(--text-color);
            margin-bottom: 1rem;
        }
        
        /* Results Section */
        .results-section {
            background-color: var(--background-color);
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
        }
        
        /* Buttons */
        .stButton>button {
            background-color: var(--primary-color);
            color: white;
            border-radius: 4px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            border: none;
            width: 100%;
            transition: all 0.2s ease;
        }
        
        .stButton>button:hover {
            background-color: #1765cc;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
        }
        
        /* Form Elements */
        .stSelectbox>div>div, .stTextInput>div>div>input, .stNumberInput>div>div>input {
            background-color: white;
            border-radius: 4px;
            border: 1px solid var(--border-color);
        }
        
        /* Table */
        .dataframe-container {
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid var(--border-color);
            margin-top: 1rem;
        }
        
        /* Charts */
        .chart-container {
            background-color: white;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
            margin-bottom: 1.5rem;
        }
        
        .chart-title {
            font-size: 1rem;
            font-weight: 500;
            color: var(--text-color);
            margin-bottom: 0.5rem;
            text-align: center;
        }
        
        /* Info Boxes */
        .info-box {
            background-color: var(--primary-light);
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary-color);
        }
        
        .warning-box {
            background-color: #fef7e0;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border-left: 4px solid var(--warning-color);
        }
        
        /* Footer */
        footer {
            margin-top: 3rem;
            text-align: center;
            color: var(--text-secondary);
            font-size: 0.875rem;
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }
        
        /* Streamlit Overrides */
        .stProgress .st-bo {
            background-color: var(--primary-color);
        }
        
        .stAlert {
            border-radius: 8px;
        }
        
        /* Hide Streamlit branding */
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        header {visibility: hidden;}
    </style>
    """, unsafe_allow_html=True)

    # Header
    st.markdown("""
    <div class="main-header">
        <h1>‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ</h1>
        <p>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ</p>
    </div>
    """, unsafe_allow_html=True)

    # Load location data
    @st.cache_data
    def load_location_data():
        try:
            with open("thai_provinces.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            # Fallback to sample data if file not found
            return [
                {
                    "name_th": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
                    "name_en": "Bangkok",
                    "amphure": [
                        {
                            "name_th": "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£",
                            "name_en": "Phra Nakhon",
                            "tambon": [
                                {"name_th": "‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á", "name_en": "Phra Borom Maha Ratchawang"},
                                {"name_th": "‡∏ß‡∏±‡∏á‡∏ö‡∏π‡∏£‡∏û‡∏≤‡∏†‡∏¥‡∏£‡∏°‡∏¢‡πå", "name_en": "Wang Burapha Phirom"}
                            ]
                        }
                    ]
                },
                {
                    "name_th": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
                    "name_en": "Chiang Mai",
                    "amphure": [
                        {
                            "name_th": "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
                            "name_en": "Mueang Chiang Mai",
                            "tambon": [
                                {"name_th": "‡∏®‡∏£‡∏µ‡∏†‡∏π‡∏°‡∏¥", "name_en": "Si Phum"},
                                {"name_th": "‡∏û‡∏£‡∏∞‡∏™‡∏¥‡∏á‡∏´‡πå", "name_en": "Phra Sing"}
                            ]
                        }
                    ]
                }
            ]

    location_data = load_location_data()
    province_names = sorted([p['name_th'] for p in location_data])

    # Initialize session state for storing results
    if 'search_results' not in st.session_state:
        st.session_state.search_results = None
    if 'search_params' not in st.session_state:
        st.session_state.search_params = {}

    # Filter section
    st.markdown('<div class="section-header">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå</div>', unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="filter-section">', unsafe_allow_html=True)
        
        tab1, tab2 = st.tabs(["‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"])
        
        with tab1:
            # Create three columns for filters
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown('<div class="filter-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</div>', unsafe_allow_html=True)
                
                selected_province = st.selectbox(
                    "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
                    [""] + province_names,
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
                )
                
                # Prepare district and subdistrict lists
                district_display_names = []
                subdistrict_display_names = []
                district_mapping = {}
                subdistrict_mapping = {}
                amphoes = []
                
                if selected_province:
                    amphoes = next((p.get("amphure", []) for p in location_data if p.get("name_th") == selected_province), [])
                    district_mapping = {
                        a["name_th"]: a["name_th"]
                        for a in amphoes
                    }
                    district_display_names = sorted(district_mapping.keys())
                
                selected_district_display = st.selectbox(
                    "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
                    [""] + district_display_names,
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
                )
                selected_district = district_mapping.get(selected_district_display, "")
                
                tambons = []
                if selected_district:
                    tambons = next(
                        (a.get("tambon", []) for a in amphoes if a["name_th"] == selected_district),
                        []
                    )
                    subdistrict_mapping = {
                        t["name_th"]: t["name_th"]
                        for t in tambons
                    }
                    subdistrict_display_names = sorted(subdistrict_mapping.keys())
                else:
                    subdistrict_mapping = {}
                    subdistrict_display_names = []
                
                selected_subdistrict_display = st.selectbox(
                    "‡∏ï‡∏≥‡∏ö‡∏•",
                    [""] + subdistrict_display_names,
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
                )
                selected_subdistrict = subdistrict_mapping.get(selected_subdistrict_display, "")
            
            with col2:
                st.markdown('<div class="filter-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå</div>', unsafe_allow_html=True)
                
                asset_type = st.selectbox(
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
                    ["‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ö‡πâ‡∏≤‡∏ô", "‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô", "‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î", "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå", "‡∏´‡πâ‡∏≠‡∏á‡∏ä‡∏∏‡∏î", "‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                )
                
                col2_1, col2_2 = st.columns(2)
                with col2_1:
                    min_price = st.text_input(
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (‡∏ö‡∏≤‡∏ó)",
                        placeholder="0",
                        help="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                    )
                with col2_2:
                    max_price = st.text_input(
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ö‡∏≤‡∏ó)",
                        placeholder="‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î",
                        help="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                    )
                
                st.markdown('<div class="filter-header">‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà</div>', unsafe_allow_html=True)
                col2_3, col2_4, col2_5 = st.columns(3)
                with col2_3:
                    land_rai = st.text_input(
                        "‡πÑ‡∏£‡πà",
                        placeholder="0",
                        help="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)"
                    )
                with col2_4:
                    land_ngan = st.text_input(
                        "‡∏á‡∏≤‡∏ô",
                        placeholder="0",
                        help="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà (‡∏á‡∏≤‡∏ô)"
                    )
                with col2_5:
                    land_wa = st.text_input(
                        "‡∏ï‡∏£.‡∏ß‡∏≤",
                        placeholder="0",
                        help="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤)"
                    )
            
            with col3:
                st.markdown('<div class="filter-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</div>', unsafe_allow_html=True)
                
                auction_date = st.date_input(
                    "‡∏ß‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•",
                    value=None,
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
                    format="DD/MM/YYYY"
                )
                
                owner = st.text_input(
                    "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á",
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
                    help="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                )
                
                # Add max pages option
                max_pages = st.number_input(
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (0 = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
                    min_value=0,
                    value=5,
                    help="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (0 = ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤)"
                )
        
        with tab2:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown('<div class="filter-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</div>', unsafe_allow_html=True)
                
                department = st.text_input(
                    "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢",
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
                    help="‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
                )
                
                case_number = st.text_input(
                    "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ",
                    placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ",
                    help="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                )
            
            with col2:
                st.markdown('<div class="filter-header">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</div>', unsafe_allow_html=True)
                
                st.selectbox(
                    "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°",
                    ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥)", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á)", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î)"],
                    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
                )
                
                st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö")
        
        # Search button
        search_col1, search_col2, search_col3 = st.columns([1, 1, 1])
        with search_col2:
            search_button = st.button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå", use_container_width=True)
        
        st.markdown('</div>', unsafe_allow_html=True)

    # Process search when button is clicked
    if search_button:
        # Store search parameters
        st.session_state.search_params = {
            "province": selected_province,
            "district": selected_district,
            "subdistrict": selected_subdistrict,
            "asset_type": asset_type,
            "min_price": min_price,
            "max_price": max_price,
            "auction_date": auction_date.strftime("%d/%m/%Y") if auction_date else None,
            "department": department,
            "owner": owner,
            "land_size": {
                "rai": land_rai,
                "ngan": land_ngan,
                "wa": land_wa
            }
        }
        
        # Clean ‡πÄ‡∏Ç‡∏ï / ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ / ‡∏ï‡∏≥‡∏ö‡∏• / ‡πÅ‡∏Ç‡∏ß‡∏á ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        def clean_district_name(name):
            return name.replace("‡πÄ‡∏Ç‡∏ï", "").replace("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "").strip() if name else ""

        def clean_subdistrict_name(name):
            return name.replace("‡∏ï‡∏≥‡∏ö‡∏•", "").replace("‡πÅ‡∏Ç‡∏ß‡∏á", "").strip() if name else ""

        cleaned_district = clean_district_name(selected_district)
        cleaned_subdistrict = clean_subdistrict_name(selected_subdistrict)
        
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ..."):
            # Call the scraping function with max_pages parameter and cleaned district/subdistrict
            max_pages_value = None if max_pages == 0 else max_pages
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô scrape_led_data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ debug
            st.markdown(f"""
            <div class="info-box">
                <strong>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</strong> ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î={selected_province}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠={cleaned_district}, ‡∏ï‡∏≥‡∏ö‡∏•={cleaned_subdistrict}
            </div>
            """, unsafe_allow_html=True)
            
            df, error = scrape_led_data(selected_province, cleaned_district, cleaned_subdistrict, max_pages_value)
            
            if error:
                st.markdown(f"""
                <div class="warning-box">
                    <strong>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> {error}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.session_state.search_results = df
            
    # Display results if available
    if st.session_state.search_results is not None:
        df = st.session_state.search_results
        
        if df.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        else:
            st.markdown('<div class="section-header">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</div>', unsafe_allow_html=True)
            st.markdown('<div class="results-section">', unsafe_allow_html=True)
            
            # Summary metrics
            st.success(f"‡∏û‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # Create metrics cards
            metric_col1, metric_col2, metric_col3 = st.columns(3)
            
            with metric_col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{len(df):,}</div>
                    <div class="metric-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                </div>
                """, unsafe_allow_html=True)
            
            with metric_col2:
                try:
                    avg_price = int(df['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'].mean())
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">{avg_price:,}</div>
                        <div class="metric-label">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó)</div>
                    </div>
                    """, unsafe_allow_html=True)
                except:
                    st.markdown("""
                    <div class="metric-card">
                        <div class="metric-value">N/A</div>
                        <div class="metric-label">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó)</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            with metric_col3:
                try:
                    most_common_type = df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"].value_counts().index[0]
                    type_count = df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"].value_counts().iloc[0]
                    st.markdown(f"""
                    <div class="metric-card">
                        <div class="metric-value">{most_common_type}</div>
                        <div class="metric-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ({type_count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</div>
                    </div>
                    """, unsafe_allow_html=True)
                except:
                    st.markdown("""
                    <div class="metric-card">
                        <div class="metric-value">N/A</div>
                        <div class="metric-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            # Data visualization
            st.markdown('<div class="section-header">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
            
            chart_col1, chart_col2 = st.columns(2)
            
            with chart_col1:
                st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                st.markdown('<div class="chart-title">‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå</div>', unsafe_allow_html=True)
                
                if "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå" in df.columns:
                    type_counts = df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"].value_counts().reset_index()
                    type_counts.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
                    
                    fig = px.bar(
                        type_counts, 
                        x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', 
                        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                        color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                        color_continuous_scale=['#4285F4', '#1A73E8', '#1967D2', '#174EA6'],
                        text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
                    )
                    
                    fig.update_layout(
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(family="Roboto, sans-serif", size=14, color="#5F6368"),
                        margin=dict(l=40, r=40, t=40, b=40),
                        xaxis_title="",
                        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                        coloraxis_showscale=False
                    )
                    
                    fig.update_traces(
                        texttemplate='%{text:,}',
                        textposition='outside',
                        hovertemplate='<b>%{x}</b><br>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: %{y:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå")
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            with chart_col2:
                st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                st.markdown('<div class="chart-title">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</div>', unsafe_allow_html=True)
                
                if "‡∏ï‡∏≥‡∏ö‡∏•" in df.columns:
                    location_counts = df["‡∏ï‡∏≥‡∏ö‡∏•"].value_counts().head(10).reset_index()
                    location_counts.columns = ['‡∏ï‡∏≥‡∏ö‡∏•', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
                    
                    fig = px.bar(
                        location_counts, 
                        x='‡∏ï‡∏≥‡∏ö‡∏•', 
                        y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                        color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                        color_continuous_scale=['#4285F4', '#1A73E8', '#1967D2', '#174EA6'],
                        text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
                    )
                    
                    fig.update_layout(
                        plot_bgcolor='white',
                        paper_bgcolor='white',
                        font=dict(family="Roboto, sans-serif", size=14, color="#5F6368"),
                        margin=dict(l=40, r=40, t=40, b=40),
                        xaxis_title="",
                        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
                        coloraxis_showscale=False
                    )
                    
                    fig.update_traces(
                        texttemplate='%{text:,}',
                        textposition='outside',
                        hovertemplate='<b>%{x}</b><br>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: %{y:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏ö‡∏•")
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Price distribution chart
            st.markdown('<div class="chart-container">', unsafe_allow_html=True)
            st.markdown('<div class="chart-title">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</div>', unsafe_allow_html=True)
            
            if "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" in df.columns:
                # Create price ranges
                price_ranges = [
                    (0, 1000000, "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"),
                    (1000000, 5000000, "1-5 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"),
                    (5000000, 10000000, "5-10 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"),
                    (10000000, 50000000, "10-50 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó"),
                    (50000000, float('inf'), "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó")
                ]
                
                price_distribution = []
                for min_price, max_price, label in price_ranges:
                    count = len(df[(df['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] >= min_price) & (df['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] < max_price)])
                    price_distribution.append({"‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤": label, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": count})
                
                price_df = pd.DataFrame(price_distribution)
                
                fig = px.pie(
                    price_df, 
                    values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 
                    names='‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤',
                    color_discrete_sequence=['#4285F4', '#34A853', '#FBBC05', '#EA4335', '#1A73E8'],
                    hole=0.4
                )
                
                fig.update_layout(
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Roboto, sans-serif", size=14, color="#5F6368"),
                    margin=dict(l=20, r=20, t=30, b=20),
                    legend=dict(orientation="h", yanchor="bottom", y=-0.2, xanchor="center", x=0.5)
                )
                
                fig.update_traces(
                    textinfo='percent+label',
                    hovertemplate='<b>%{label}</b><br>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: %{value:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£<br>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô: %{percent}'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Data table with improved formatting
            st.markdown('<div class="section-header">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>', unsafe_allow_html=True)
            
            # Format the dataframe for display
            display_df = df.copy()
            
            # Format price column
            if "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" in display_df.columns:
                display_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = display_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].apply(lambda x: f"{int(x):,} ‡∏ö‡∏≤‡∏ó" if pd.notnull(x) else "")
            
            # Display the table with custom styling
            st.dataframe(
                display_df,
                use_container_width=True,
                column_config={
                    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": st.column_config.TextColumn(
                        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                        help="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
                        width="medium",
                    ),
                    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå": st.column_config.TextColumn(
                        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
                        width="medium",
                    ),
                    "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ": st.column_config.TextColumn(
                        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ",
                        width="medium",
                    ),
                },
                height=400
            )
            
            # Export options
            st.markdown('<div class="section-header">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>', unsafe_allow_html=True)
            
            export_col1, export_col2, export_col3 = st.columns(3)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
            export_df = df.copy()
            
            with export_col1:
                csv = export_df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
                    csv,
                    file_name=f"led_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime='text/csv',
                    use_container_width=True
                )
            
            with export_col2:
                # Generate Excel file
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                    # Convert the dataframe to an XlsxWriter Excel object
                    export_df.to_excel(writer, sheet_name='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', index=False)
                    
                    # Get the xlsxwriter workbook and worksheet objects
                    workbook = writer.book
                    worksheet = writer.sheets['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå']
                    
                    # Add a format for the header cells
                    header_format = workbook.add_format({
                        'bold': True,
                        'text_wrap': True,
                        'valign': 'top',
                        'fg_color': '#D9D9D9',
                        'border': 1
                    })
                    
                    # Write the column headers with the defined format
                    for col_num, value in enumerate(export_df.columns.values):
                        worksheet.write(0, col_num, value, header_format)
                        
                    # Set column widths
                    worksheet.set_column('A:K', 15)
                    
                    # Add a number format for the price column
                    money_format = workbook.add_format({'num_format': '#,##0 "‡∏ö‡∏≤‡∏ó"'})
                    
                    # Find the index of the price column
                    if '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' in export_df.columns:
                        price_col_idx = export_df.columns.get_loc('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô')
                        # Apply the money format to the price column
                        worksheet.set_column(price_col_idx, price_col_idx, 18, money_format)
                
                # Reset buffer position
                buffer.seek(0)
                
                st.download_button(
                    "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
                    buffer,
                    file_name=f"led_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            
            with export_col3:
                # Generate PDF report using FPDF2 (supports Thai language)
                def create_pdf_with_thai_font():
                    # Create a buffer to store the PDF
                    buffer = io.BytesIO()
                    
                    # Create PDF with FPDF2
                    pdf = FPDF()
                    pdf.add_page()
                    
                    # Try to add a Thai font - FPDF2 has better Unicode support
                    try:
                        # Try to use a Thai font if available
                        pdf.add_font("THSarabun", "", "THSarabun.ttf", uni=True)
                        pdf.set_font("THSarabun", size=16)
                        thai_font_available = True
                    except:
                        # Fallback to DejaVu which has better Unicode support
                        try:
                            pdf.add_font("DejaVu", "", "DejaVuSansCondensed.ttf", uni=True)
                            pdf.set_font("DejaVu", size=12)
                            thai_font_available = True
                        except:
                            # If no Unicode font is available, use English text
                            pdf.set_font("Arial", size=12)
                            thai_font_available = False
                    
                    # Add title and information
                    if thai_font_available:
                        pdf.cell(200, 10, txt="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ", ln=True, align='C')
                        pdf.ln(5)
                        pdf.cell(200, 10, txt=f"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {selected_province or '-'} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: {selected_district or '-'} ‡∏ï‡∏≥‡∏ö‡∏•: {selected_subdistrict or '-'}", ln=True)
                        pdf.cell(200, 10, txt=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(df):,}", ln=True)
                        if 'avg_price' in locals():
                            pdf.cell(200, 10, txt=f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_price:,} ‡∏ö‡∏≤‡∏ó", ln=True)
                    else:
                        # English fallback
                        pdf.cell(200, 10, txt="Property Report from Legal Execution Department", ln=True, align='C')
                        pdf.ln(5)
                        pdf.cell(200, 10, txt=f"Province: {selected_province or '-'} District: {selected_district or '-'} Subdistrict: {selected_subdistrict or '-'}", ln=True)
                        pdf.cell(200, 10, txt=f"Total items: {len(df):,}", ln=True)
                        if 'avg_price' in locals():
                            pdf.cell(200, 10, txt=f"Average price: {avg_price:,} THB", ln=True)
                    
                    pdf.ln(10)
                    
                    # Add a summary table (simplified for compatibility)
                    if len(df) > 0:
                        # Table header
                        if thai_font_available:
                            headers = ['‡∏•ÔøΩÔøΩ‡∏î‡∏±‡∏ö', '‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà-‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà', '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô']
                        else:
                            headers = ['No.', 'Lot-Set', 'Case No.', 'Type', 'Price (THB)']
                        
                        # Set column widths
                        col_widths = [10, 30, 30, 40, 35]
                        
                        # Draw header
                        pdf.set_fill_color(200, 200, 200)
                        for i, header in enumerate(headers):
                            pdf.cell(col_widths[i], 10, header, 1, 0, 'C', True)
                        pdf.ln()
                        
                        # Draw rows (limit to 20 rows for PDF)
                        for i, row in export_df.head(20).iterrows():
                            pdf.cell(col_widths[0], 10, str(i + 1), 1)
                            pdf.cell(col_widths[1], 10, str(row.get('‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà-‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà', '')), 1)
                            pdf.cell(col_widths[2], 10, str(row.get('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏î‡∏µ', '')), 1)
                            pdf.cell(col_widths[3], 10, str(row.get('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', '')), 1)
                            pdf.cell(col_widths[4], 10, f"{int(row.get('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', 0)):,}", 1)
                            pdf.ln()
                    
                    # Output the PDF to the buffer
                    pdf.output(buffer)
                    
                    # Get the value of the buffer
                    pdf_value = buffer.getvalue()
                    buffer.close()
                    
                    return pdf_value
                
                # Create the PDF
                pdf_data = create_pdf_with_thai_font()
                
                st.download_button(
                    "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF",
                    pdf_data,
                    file_name=f"led_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            
            # Email section
            st.markdown('<div class="section-header">‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>', unsafe_allow_html=True)
            
            email_col1, email_col2 = st.columns([3, 1])
            with email_col1:
                user_email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", placeholder="example@email.com")
            
            with email_col2:
                send_email = st.button("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•", use_container_width=True)
            
            if send_email:
                if user_email:
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•..."):
                        try:
                            # Save data to CSV
                            export_df.to_csv("led_data.csv", index=False, encoding='utf-8-sig')
                            
                            # Create email
                            msg = MIMEMultipart()
                            msg["From"] = "your_email@gmail.com"
                            msg["To"] = user_email
                            msg["Subject"] = f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ - {datetime.now().strftime('%d/%m/%Y')}"
                            
                            # Add email body
                            email_body = f"""
                            <html>
                            <head>
                                <style>
                                    body {{ font-family: Arial, sans-serif; }}
                                    .header {{ color: #1a73e8; font-size: 18px; font-weight: bold; margin-bottom: 20px; }}
                                    .info {{ margin-bottom: 15px; }}
                                    .footer {{ margin-top: 30px; font-size: 12px; color: #5f6368; }}
                                </style>
                            </head>
                            <body>
                                <div class="header">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ</div>
                                <div class="info">
                                    <p>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {selected_province or '-'}</p>
                                    <p>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: {selected_district or '-'}</p>
                                    <p>‡∏ï‡∏≥‡∏ö‡∏•: {selected_subdistrict or '-'}</p>
                                    <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                                </div>
                                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                                <div class="footer">
                                    <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ</p>
                                    <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {datetime.now().strftime('%d/%m/%Y')}</p>
                                </div>
                            </body>
                            </html>
                            """
                            
                            msg.attach(MIMEText(email_body, 'html'))
                            
                            # Attach CSV file
                            with open("led_data.csv", "rb") as f:
                                part = MIMEBase("application", "octet-stream")
                                part.set_payload(f.read())
                                encoders.encode_base64(part)
                                part.add_header("Content-Disposition", "attachment; filename=led_data.csv")
                                msg.attach(part)
                            
                            # Save data to Excel
                            with pd.ExcelWriter("led_data.xlsx", engine='xlsxwriter') as writer:
                                export_df.to_excel(writer, sheet_name='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå', index=False)
                                
                                # Get the xlsxwriter workbook and worksheet objects
                                workbook = writer.book
                                worksheet = writer.sheets['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå']
                                
                                # Add a format for the header cells
                                header_format = workbook.add_format({
                                    'bold': True,
                                    'text_wrap': True,
                                    'valign': 'top',
                                    'fg_color': '#D9D9D9',
                                    'border': 1
                                })
                                
                                # Write the column headers with the defined format
                                for col_num, value in enumerate(export_df.columns.values):
                                    worksheet.write(0, col_num, value, header_format)
                                    
                                # Set column widths
                                worksheet.set_column('A:K', 15)
                                
                                # Add a number format for the price column
                                money_format = workbook.add_format({'num_format': '#,##0 "‡∏ö‡∏≤‡∏ó"'})
                                
                                # Find the index of the price column
                                if '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' in export_df.columns:
                                    price_col_idx = export_df.columns.get_loc('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô')
                                    # Apply the money format to the price column
                                    worksheet.set_column(price_col_idx, price_col_idx, 18, money_format)
                            
                            # Attach Excel file
                            with open("led_data.xlsx", "rb") as f:
                                part = MIMEBase("application", "octet-stream")
                                part.set_payload(f.read())
                                encoders.encode_base64(part)
                                part.add_header("Content-Disposition", "attachment; filename=led_data.xlsx")
                                msg.attach(part)
                            
                            # Create PDF and attach
                            pdf_data = create_pdf_with_thai_font()
                            with open("led_summary.pdf", "wb") as f:
                                f.write(pdf_data)
                                
                            with open("led_summary.pdf", "rb") as f:
                                part = MIMEBase("application", "octet-stream")
                                part.set_payload(f.read())
                                encoders.encode_base64(part)
                                part.add_header("Content-Disposition", "attachment; filename=led_summary.pdf")
                                msg.attach(part)
                            
                            # Send email
                            with smtplib.SMTP("smtp.gmail.com", 587) as server:
                                server.starttls()
                                server.login("your_email@gmail.com", "your_app_password")
                                server.send_message(msg)
                            
                            st.success(f"‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á {user_email} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            
                            # Clean up temporary files
                            if os.path.exists("led_data.csv"):
                                os.remove("led_data.csv")
                            if os.path.exists("led_data.xlsx"):
                                os.remove("led_data.xlsx")
                            if os.path.exists("led_summary.pdf"):
                                os.remove("led_summary.pdf")
                                
                        except Exception as e:
                            st.error(f"‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
            
            st.markdown('</div>', unsafe_allow_html=True)

    # Footer
    st.markdown("""
    <footer>
        <p>¬© 2024 ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Your Company</p>
        <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ‡∏Å‡∏£‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏î‡∏µ ‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°</p>
    </footer>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
